import fetch from 'node-fetch';
const KEY = process.env.FMP_API_KEY || 'demo';
export async function GET(req){ const { searchParams } = new URL(req.url); const symbol = searchParams.get('symbol') || 'AAPL'; try{ const histUrl = `https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?timeseries=30&apikey=${KEY}`; const qUrl = `https://financialmodelingprep.com/api/v3/quote-short/${symbol}?apikey=${KEY}`; const [hRes,qRes] = await Promise.all([fetch(histUrl), fetch(qUrl)]); const h = await hRes.json(); const q = await qRes.json(); const series = (h.historical||[]).map(s=>s.close).reverse(); const price = q[0]?.price || series[series.length-1] || 0; const open = series[0] || price; function calcRSI(closes, period=14){ if(closes.length<=period) return null; let gains=0,losses=0; for(let i=closes.length-period;i<closes.length;i++){ const d=closes[i]-closes[i-1]; if(d>0) gains+=d; else losses+=Math.abs(d); } const ag=gains/period, al=losses/period; if(al===0) return 100; const rs=ag/al; return +(100 - 100/(1+rs)).toFixed(2); } const rsi = calcRSI(series.slice(-15)); return new Response(JSON.stringify({ symbol, price, open, series, rsi }), { status: 200 }); }catch(e){ console.error(e); return new Response(JSON.stringify({ error:'fetch error' }), { status:500 }); } }
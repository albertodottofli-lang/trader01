import fetch from 'node-fetch'; const KEY = process.env.FMP_API_KEY || 'demo'; function stats(prices){ const returns=[]; for(let i=1;i<prices.length;i++) returns.push((prices[i]-prices[i-1])/prices[i-1]*100); const avg=returns.reduce((a,b)=>a+b,0)/returns.length; const std=Math.sqrt(returns.reduce((a,b)=>a+(b-avg)*(b-avg),0)/returns.length); const min=Math.min(...returns); return { avg, std, min }; } export async function GET(req){ const { searchParams } = new URL(req.url); const symbol = searchParams.get('symbol') || 'AAPL'; try{ const hurl = `https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?timeseries=60&apikey=${KEY}`; const res = await fetch(hurl); const j = await res.json(); const closes = (j.historical||[]).map(x=>x.close).reverse(); const last7 = closes.slice(-7); const last30 = closes.slice(-30); const s7 = stats(last7); const s30 = stats(last30); const avgPos = s30 ? s30.avg : 0; const buy = Math.max(0.5, +(avgPos*1.2).toFixed(2)); const sell = Math.max(1, +(Math.abs(s30.min||0)*1.2).toFixed(2)); return new Response(JSON.stringify({ symbol, buyThreshold: buy, sellThreshold: sell, volatility: s30.std || 0, stats7: s7, stats30: s30 }), { status: 200 }); }catch(e){ console.error(e); return new Response(JSON.stringify({ error:'strategy error' }), { status:500 }); } }
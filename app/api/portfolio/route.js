import Database from 'better-sqlite3'; import fs from 'fs'; const DB_PATH = './data/trader.db'; function ensure(){ if(!fs.existsSync(DB_PATH)){ const db=new Database(DB_PATH); db.prepare('CREATE TABLE IF NOT EXISTS portfolio (id INTEGER PRIMARY KEY, cash REAL);').run(); db.prepare('CREATE TABLE IF NOT EXISTS positions (symbol TEXT PRIMARY KEY, qty INTEGER, avgPrice REAL, peakPrice REAL);').run(); db.prepare('CREATE TABLE IF NOT EXISTS history (time INTEGER, action TEXT, symbol TEXT, qty INTEGER, price REAL);').run(); db.prepare('INSERT INTO portfolio(cash) VALUES (?)').run(Number(process.env.INITIAL_CASH||10000)); db.close(); } } export async function GET(){ ensure(); const db=new Database(DB_PATH); const cash=db.prepare('SELECT cash FROM portfolio LIMIT 1').get().cash; const positions=db.prepare('SELECT * FROM positions').all(); const history=db.prepare('SELECT * FROM history ORDER BY time DESC LIMIT 200').all(); db.close(); return new Response(JSON.stringify({ cash, positions, history }), { status:200 }); } export async function POST(req){ ensure(); const db=new Database(DB_PATH); const body=await req.json(); if(body.type==='buy'){ const { symbol, qty, price } = body; const cost = qty*price; const cashRow=db.prepare('SELECT cash FROM portfolio LIMIT 1').get(); if(cost>cashRow.cash){ db.close(); return new Response(JSON.stringify({ error:'insufficient cash' }), { status:400 }); } const pos=db.prepare('SELECT * FROM positions WHERE symbol=?').get(symbol); if(!pos){ db.prepare('INSERT INTO positions(symbol,qty,avgPrice,peakPrice) VALUES(?,?,?,?)').run(symbol, qty, price, price); } else { const totalCost = pos.qty*pos.avgPrice + cost; const newQty = pos.qty + qty; const newAvg = totalCost / newQty; db.prepare('UPDATE positions SET qty=?, avgPrice=?, peakPrice=? WHERE symbol=?').run(newQty, newAvg, Math.max(pos.peakPrice, price), symbol); } db.prepare('UPDATE portfolio SET cash = cash - ?').run(cost); db.prepare('INSERT INTO history(time,action,symbol,qty,price) VALUES(?,?,?,?,?)').run(Date.now(),'buy',symbol,qty,price); db.close(); return new Response(JSON.stringify({ ok:true }), { status:200 }); } if(body.type==='sell'){ const { symbol, qty, price } = body; const pos=db.prepare('SELECT * FROM positions WHERE symbol=?').get(symbol); if(!pos||pos.qty<qty){ db.close(); return new Response(JSON.stringify({ error:'not enough shares' }), { status:400 }); } const proceeds=qty*price; const newQty=pos.qty-qty; if(newQty===0) db.prepare('DELETE FROM positions WHERE symbol=?').run(symbol); else db.prepare('UPDATE positions SET qty=? WHERE symbol=?').run(newQty, symbol); db.prepare('UPDATE portfolio SET cash = cash + ?').run(proceeds); db.prepare('INSERT INTO history(time,action,symbol,qty,price) VALUES(?,?,?,?,?)').run(Date.now(),'sell',symbol,qty,price); db.close(); return new Response(JSON.stringify({ ok:true }), { status:200 }); } if(body.type==='reset'){ try{ fs.unlinkSync(DB_PATH); }catch{} ensure(); const db=new Database(DB_PATH); const cash=db.prepare('SELECT cash FROM portfolio LIMIT 1').get().cash; db.close(); return new Response(JSON.stringify({ cash }), { status:200 }); } db.close(); return new Response(JSON.stringify({ error:'invalid' }), { status:400 }); }